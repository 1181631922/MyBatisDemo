<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--resultType 指定单条记录返回的类型-->

<mapper namespace="com.fanyafeng.mapper.IUserMapper">


    <sql id="queryUser">
        <if test="userCustom!=null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                AND user.sex=#{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.username!=''">
                AND user.username=#{userCustom.username}
            </if>
            -- collection:指定输入对象中集合属性
            -- item:每个遍历生成对象对应的字段名
            -- open:开始遍历拼接的串
            -- close:结束遍历拼接的串
            -- separator:遍历的两个对象中需要拼接的串
            <if test="ids!=null">
                <foreach collection="ids" item="id" open="and (" close=")" separator="or">
                    id=#{id}
                </foreach>
            </if>
        </if>
    </sql>

    <select id="queryUserList" parameterType="com.fanyafeng.model.UserQueryVo"
            resultType="com.fanyafeng.model.UserCustom">
        SELECT * FROM USER
        <where>
            <include refid="queryUser"/>
        </where>
    </select>


    <!--动态sql-->
    <select id="findUserList" parameterType="com.fanyafeng.model.UserQueryVo"
            resultType="com.fanyafeng.model.UserCustom">
        SELECT * FROM USER
        <where>
            <if test="userCustom!=null">
                <if test="userCustom.sex!=null and userCustom.sex!=''">
                    AND user.sex=#{userCustom.sex}
                </if>
                <if test="userCustom.username!=null and userCustom.username!=''">
                    AND user.username=#{userCustom.username}
                </if>
            </if>
        </where>
    </select>

    <!--定义resultMap
        type:resultMap最终映射的java对象
        id:对resultMap的唯一标识
        -->
    <resultMap type="com.fanyafeng.model.User" id="userResultMap">
        <!--id表示查询结果中的唯一标识
            coumn:查询出来的列名
            property:type指定的pojo类型中德属性名
            最终resultmap对colu和property做一个映射关系-->
        <id column="id_" property="id"/>
        <!--
            result:对普通映射的定义-->
        <result column="username_" property="username"/>
    </resultMap>

    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_,username username_ FROM user WHERE id=#{VALUE}
    </select>

    <!--
        user.username:pojo的映射
    -->
    <select id="findUserByUserQuery" parameterType="com.fanyafeng.model.UserQueryVo"
            resultType="com.fanyafeng.model.UserCustom">
        SELECT * FROM USER WHERE user.sex=#{userCustom.sex} AND user.username LIKE '%${userCustom.username}'
    </select>

    <!--获取查询数量-->
    <select id="findUserCount" parameterType="com.fanyafeng.model.UserQueryVo" resultType="int">
        SELECT COUNT(*) FROM USER WHERE user.sex=#{userCustom.sex} AND user.username LIKE '%${userCustom.username}'
    </select>

    <select id="selectUserById" parameterType="int" resultType="com.fanyafeng.model.User">
        select * from user where id = #{id}
    </select>

    <!--'%${value}' 表示拼接sql串,只能使用value,有可能会引起sql注入的情况-->
    <select id="queryUserByName" parameterType="String" resultType="com.fanyafeng.model.User">
        SELECT * FROM user WHERE username LIKE #{name}
    </select>

    <!--INSERT INTO USER (id,username,sex,address) VALUE (null,"陈潇然","女","大学同学")-->
    <!-- SELECT LAST_INSERT_ID() 得到刚插入数据库的记录的主键值,只适用于自增主键
         keyProperty:将查询到主键值设置到相应的 parameterType 属性中
         order 相对于执行的sql语句的顺序-->
    <insert id="add" parameterType="com.fanyafeng.model.User">
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>

        insert into user (id,username,birthday,sex,address) values (#{id},#{username},#{birthday},#{sex},#{address})
    </insert>
    <!--非自增的id-->
    <!-- <selectKey keyProperty="id" order="BEFORE" resultType="String">
            SELECT uuid();
        </selectKey>
        insert into user (id,username,birthday,sex,address) values (#{id},#{username},#{birthday},#{sex},#{address})
    -->

    <!--根据id进行删除-->
    <delete id="del" parameterType="int">
        DELETE FROM user WHERE id = #{id}
    </delete>

    <!--根据id更新数据库-->
    <update id="alter" parameterType="com.fanyafeng.model.User">
        UPDATE USER  SET username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} WHERE id = #{id}
    </update>
</mapper>